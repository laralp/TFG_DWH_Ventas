CREATE PROCEDURE 13_Carga_Auxiliares ()
BEGIN

  /* ----------------- */
  /* Carga de AUX_MMTT */
  /* ----------------- */
  TRUNCATE TABLE STAGING.AUX_MMTT;
  INSERT INTO STAGING.AUX_MMTT (ID_TIENDA, ID_FECHA, MMTT_DIA, MMTT_DIA_POST, FECHA_ALTA, USUARIO_ALTA)
    SELECT T.ID_TIENDA, 
	       F.ID_FECHA, 
		   IF (   ((T.FECHA_APERTURA>DATEADD(ID_FECHA, interval -1 year)) AND (T.FECHA_APERTURA<ID_FECHA))
               OR ((T.FECHA_CIERRE>DATEADD(ID_FECHA, interval -1 year)) AND (T.FECHA_CIERRE<ID_FECHA))
               OR ((T.FECHA_ULT_REF>DATEADD(ID_FECHA, interval -1 year)) AND (T.FECHA_ULT_REF<ID_FECHA))
			   ,0,1) MMTT_DIA,
		   IF (   ((T.FECHA_APERTURA>ID_FECHA) AND (T.FECHA_APERTURA<DATEADD(ID_FECHA, interval 1 year)))
               OR ((T.FECHA_CIERRE>ID_FECHA) AND (T.FECHA_CIERRE<DATEADD(ID_FECHA, interval -1 year)))
               OR ((T.FECHA_ULT_REF>ID_FECHA) AND (T.FECHA_ULT_REF<DATEADD(ID_FECHA, interval -1 year)))
			   ,0,1) MMTT_DIA_POST,
		   current_timestamp,
		   current_user
    FROM MAESTROS.DIM_TIENDA T CROSS JOIN MAESTROS.DIM_FECHA F
  COMMIT; 
  
  /* --------------------- */
  /* Carga de AUX_MMTT_MES */
  /* --------------------- */
  CREATE TEMPORARY TABLE temp_mmtt_mes (
  MMTT_MES bit,
  MMTT_MES_POST bit,
  ID_ANO int,
  ID_MES int,
  ID_TIENDA int);
  INSERT INTO temp_mmtt_mes (MMTT_MES, MMTT_MES_POST, ID_ANO, ID_MES, ID_TIENDA)
    SELECT IF(COUNT(MMTT_DIA)=SUM(MMTT_DIA),1,0),
	       IF(COUNT(MMTT_DIA)=SUM(MMTT_DIA_POST),1,0),
		   YEAR(ID_FECHA),
		   MONTH(ID_FECHA),
		   ID_TIENDA
	FROM STAGING.AUX_MMTT
	GROUP BY YEAR(ID_FECHA), MONTH(ID_FECHA), ID_TIENDA;
  /* Se actualizan los registros que ya existen */
  UPDATE STAGING.AUX_MMTT_MES A
  INNER JOIN temp_mmtt_mes T
  ON (A.ID_ANO=T.ID_ANO AND A.ID_MES=T.ID_MES AND A.ID_TIENDA=T.ID_TIENDA)
  SET MMTT_MES=T.MMTT_MES,
      MMTT_MES_POST=T.MMTT_MES_POST,
	  FECHA_MODIFICACION=current_timestamp,
	  USUARIO_MODIFICACION=current_user;
  COMMIT;
  /* Se insertan los registros nuevos */
  INSERT INTO STAGING.AUX_MMTT_MES (ID_TIENDA, ID_MES, ID_ANO, MMTT_MES, MMTT_MES_POST, FECHA_ALTA, USUARIO_ALTA)
    SELECT T.ID_TIENDA, T.ID_MES, T.ID_ANO, T.MMTT_MES, T.MMTT_MES_POST, current_timestamp, current_user
    FROM temp_mmtt_mes T
    LEFT JOIN STAGING.AUX_MMTT A
    ON (A.ID_ANO=T.ID_ANO AND A.ID_MES=T.ID_MES AND A.ID_TIENDA=T.ID_TIENDA)
    WHERE A.ID_ANO IS NULL;
  COMMIT;
  
  /* --------------------------- */
  /* Carga de AUX_MMTT_TRIMESTRE */
  /* --------------------------- */
  CREATE TEMPORARY TABLE temp_mmtt_trim (
  MMTT_TRIMESTRE bit,
  MMTT_TRIMESTRE_POST bit,
  ID_ANO int,
  ID_TRIMESTRE int,
  ID_TIENDA int);
  INSERT INTO temp_mmtt_trim (MMTT_TRIMESTRE, MMTT_TRIMESTRE_POST, ID_ANO, ID_TRIMESTRE, ID_TIENDA)
    SELECT IF(COUNT(MMTT_MES)=SUM(MMTT_MES),1,0),
	       IF(COUNT(MMTT_MES)=SUM(MMTT_DIA_MES),1,0),
		   ID_ANO,
		   IF(ID_MES IN (1,2,3),1,
		      IF(ID_MES IN (4,5,6),2,
			     IF(ID_MES IN (7,8,9),3,4))),
		   ID_TIENDA
	FROM STAGING.AUX_MMTT_MES
	GROUP BY 3,4,5;
  /* Se actualizan los registros que ya existen */
  UPDATE STAGING.AUX_MMTT_TRIMESTRE A
  INNER JOIN temp_mmtt_trim T
  ON (A.ID_ANO=T.ID_ANO AND A.ID_TRIMESTRE=T.ID_TRIMESTRE AND A.ID_TIENDA=T.ID_TIENDA)
  SET MMTT_TRIMESTRE=T.MMTT_TRIMESTRE,
      MMTT_TRIMESTRE_POST=T.MMTT_TRIMESTRE_POST,
	  FECHA_MODIFICACION=current_timestamp,
	  USUARIO_MODIFICACION=current_user;
  COMMIT;
  /* Se insertan los registros nuevos */
  INSERT INTO STAGING.AUX_MMTT_TRIMESTRE (ID_TIENDA, ID_TRIMESTRE, ID_ANO, MMTT_TRIMESTRE, MMTT_TRIMESTRE_POST, FECHA_ALTA, USUARIO_ALTA)
    SELECT T.ID_TIENDA, T.ID_TRIMESTRE, T.ID_ANO, T.MMTT_TRIMESTRE, T.MMTT_TRIMESTRE_POST, current_timestamp, current_user
    FROM temp_mmtt_trim T
    LEFT JOIN STAGING.AUX_MMTT_TRIMESTRE A
    ON (A.ID_ANO=T.ID_ANO AND A.ID_TRIMESTRE=T.ID_TRIMESTRE AND A.ID_TIENDA=T.ID_TIENDA)
    WHERE A.ID_ANO IS NULL;  
  COMMIT;
END;